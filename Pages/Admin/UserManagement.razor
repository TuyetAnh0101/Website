@page "/admin/users"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SportsStore.Models
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ILogger<UserManagement> Logger

<h3>Quản lý người dùng</h3>

<div class="mb-3 d-flex justify-content-between">
    <input class="form-control w-25" placeholder="Tìm kiếm..." @bind="searchTerm" @bind:event="oninput" />
    <button class="btn btn-primary" @onclick="ShowAddForm">➕ Thêm người dùng</button>
</div>

@if (filteredUsers == null)
{
    <p>Đang tải người dùng...</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Họ tên</th>
                <th>Email</th>
                <th>Ngày sinh</th>
                <th>Địa chỉ</th>
                <th>Điện thoại</th>
                <th>Quyền</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var user in pagedUsers)
        {
            <tr>
                <td>@user.FullName</td>
                <td>@user.Email</td>
                <td>@user.BirthDate?.ToString("dd/MM/yyyy")</td>
                <td>@user.Address</td>
                <td>@user.PhoneNumber</td>
                <td>@(user.IsAdmin ? "Admin" : "User")</td>
                <td>
                    <button class="btn btn-sm btn-warning me-1" @onclick="@(() => EditUser(user))">Sửa</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <!-- Pagination -->
    <div class="d-flex justify-content-end mt-3">
        @for (int i = 1; i <= totalPages; i++)
        {
            <button class="btn btn-outline-secondary me-1 @(i == currentPage ? "active" : "")" @onclick="@(() => GoToPage(i))">@i</button>
        }
    </div>
}

<!-- Form thêm/sửa -->
@if (showForm)
{
    <EditForm Model="formUser" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="card mt-3 p-3">
            <h5>@(isEditMode ? "Sửa người dùng" : "Thêm người dùng")</h5>

            <div class="mb-2">
                <label>Họ tên:</label>
                <InputText class="form-control" @bind-Value="formUser.FullName" />
            </div>
            <div class="mb-2">
                <label>Email:</label>
                <InputText class="form-control" @bind-Value="formUser.Email" />
            </div>
            <div class="mb-2">
                <label>Ngày sinh:</label>
                <InputDate class="form-control" @bind-Value="formUser.BirthDate" />
            </div>
            <div class="mb-2">
                <label>Địa chỉ:</label>
                <InputText class="form-control" @bind-Value="formUser.Address" />
            </div>
            <div class="mb-2">
                <label>Số điện thoại:</label>
                <InputText class="form-control" @bind-Value="formUser.PhoneNumber" />
            </div>
            <div class="mb-2">
                <label>Quyền:</label>
                <InputCheckbox @bind-Value="formUser.IsAdmin" />
                <label class="ms-2">Là Admin</label>
            </div>

            @if (!isEditMode)
            {
                <div class="mb-2">
                    <label>Mật khẩu:</label>
                    <InputText class="form-control" @bind-Value="newPassword" type="password" />
                </div>
            }

            <button class="btn btn-success me-2" type="submit">Lưu</button>
            <button class="btn btn-secondary" type="button" @onclick="HideForm">Hủy</button>
        </div>
    </EditForm>
}

@code {
    private List<ApplicationUser> users = new();
    private List<ApplicationUser> filteredUsers = new();
    private List<ApplicationUser> pagedUsers = new();

    private ApplicationUser formUser = new();
    private string newPassword = "";
    private bool showForm = false;
    private bool isEditMode = false;
    private string searchTerm = "";

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserManager.Users.ToListAsync();
        ApplySearchAndPaging();
    }

    private void ApplySearchAndPaging()
    {
        filteredUsers = users
            .Where(u => string.IsNullOrWhiteSpace(searchTerm)
                || u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

        totalPages = (int)Math.Ceiling(filteredUsers.Count / (double)pageSize);
        currentPage = Math.Clamp(currentPage, 1, totalPages == 0 ? 1 : totalPages);
        pagedUsers = filteredUsers.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        ApplySearchAndPaging();
    }

    private void ShowAddForm()
    {
        formUser = new ApplicationUser();
        newPassword = "";
        isEditMode = false;
        showForm = true;
    }

    private void EditUser(ApplicationUser user)
    {
        formUser = new ApplicationUser
        {
            Id = user.Id,
            FullName = user.FullName,
            Email = user.Email,
            Address = user.Address,
            BirthDate = user.BirthDate,
            PhoneNumber = user.PhoneNumber,
            IsAdmin = user.IsAdmin
        };
        isEditMode = true;
        showForm = true;
    }

    private async Task HandleSubmit()
    {
        IdentityResult result;

        if (isEditMode)
        {
            var user = await UserManager.FindByIdAsync(formUser.Id);
            if (user != null)
            {
                user.FullName = formUser.FullName;
                user.Email = formUser.Email;
                user.UserName = formUser.Email;
                user.Address = formUser.Address;
                user.PhoneNumber = formUser.PhoneNumber;
                user.BirthDate = formUser.BirthDate;
                user.IsAdmin = formUser.IsAdmin;

                result = await UserManager.UpdateAsync(user);
            }
            else return;
        }
        else
        {
            formUser.UserName = formUser.Email;
            result = await UserManager.CreateAsync(formUser, newPassword);
        }

        if (result.Succeeded)
        {
            showForm = false;
            await LoadUsers();
        }
        else
        {
            Logger.LogError("Lỗi: " + string.Join(", ", result.Errors.Select(e => e.Description)));
        }
    }

    private void HideForm()
    {
        showForm = false;
    }
}
