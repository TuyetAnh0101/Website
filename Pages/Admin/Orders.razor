@page "/admin/orders"
@using SportsStore.Models
@using Microsoft.EntityFrameworkCore
@inherits OwningComponentBase<IOrderRepository>

<h3 class="mb-4">Quản lý đơn hàng</h3>

<!-- Bảng theo từng trạng thái -->
<OrderTable TableTitle="Chờ xác nhận"
            Orders="PendingOrders"
            ButtonLabel="Chuyển sang Chờ giao hàng"
            OrderSelected="orderId => UpdateOrderStatus(orderId, OrderStatus.ChoGiaoHang)" />

<OrderTable TableTitle="Chờ giao hàng"
            Orders="WaitingOrders"
            ButtonLabel="Chuyển sang Đang vận chuyển"
            OrderSelected="orderId => UpdateOrderStatus(orderId, OrderStatus.DangVanChuyen)" />

<OrderTable TableTitle="Đang vận chuyển"
            Orders="DeliveringOrders"
            ButtonLabel="Chuyển sang Đã nhận hàng"
            OrderSelected="orderId => UpdateOrderStatus(orderId, OrderStatus.DaNhanHang)" />

<OrderTable TableTitle="Yêu cầu hoàn tiền"
            Orders="RefundRequestedOrders"
            ButtonLabel="Hoàn tiền thành công"
            OrderSelected="orderId => UpdateOrderStatus(orderId, OrderStatus.HoanTienThanhCong)" />

<OrderTable TableTitle="Đơn đã nhận"
            Orders="CompletedOrders"
            ButtonLabel="Không thao tác"
            OrderSelected="@(id => Task.CompletedTask)" />

<OrderTable TableTitle="Đơn đã hủy"
            Orders="CancelledOrders"
            ButtonLabel="Không thao tác"
            OrderSelected="@(id => Task.CompletedTask)" />

<button class="btn btn-info mt-4" @onclick="UpdateData">Làm mới danh sách</button>

@code {
    public IOrderRepository Repository => Service;

    public IEnumerable<Order> AllOrders { get; set; } = Enumerable.Empty<Order>();

    public IEnumerable<Order> PendingOrders { get; set; } = Enumerable.Empty<Order>();
    public IEnumerable<Order> WaitingOrders { get; set; } = Enumerable.Empty<Order>();
    public IEnumerable<Order> DeliveringOrders { get; set; } = Enumerable.Empty<Order>();
    public IEnumerable<Order> CompletedOrders { get; set; } = Enumerable.Empty<Order>();
    public IEnumerable<Order> CancelledOrders { get; set; } = Enumerable.Empty<Order>();
    public IEnumerable<Order> RefundRequestedOrders { get; set; } = Enumerable.Empty<Order>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AllOrders = await Repository.Orders
            .Include(o => o.Lines)
            .ThenInclude(l => l.Product)
            .AsNoTracking()
            .ToListAsync();

        PendingOrders = AllOrders.Where(o => o.Status == OrderStatus.ChoXacNhan).OrderByDescending(o => o.OrderID);
        WaitingOrders = AllOrders.Where(o => o.Status == OrderStatus.ChoGiaoHang).OrderByDescending(o => o.OrderID);
        DeliveringOrders = AllOrders.Where(o => o.Status == OrderStatus.DangVanChuyen).OrderByDescending(o => o.OrderID);
        CompletedOrders = AllOrders.Where(o => o.Status == OrderStatus.DaNhanHang).OrderByDescending(o => o.OrderID);
        CancelledOrders = AllOrders.Where(o => o.Status == OrderStatus.DaHuy).OrderByDescending(o => o.OrderID);
        RefundRequestedOrders = AllOrders.Where(o => o.Status == OrderStatus.YeuCauHoanTien).OrderByDescending(o => o.OrderID);
    }

    public async Task UpdateOrderStatus(int id, OrderStatus newStatus)
    {
        var order = await Repository.Orders.FirstOrDefaultAsync(o => o.OrderID == id);
        if (order != null)
        {
            order.Status = newStatus;
            Repository.SaveOrder(order);
            await UpdateData();
        }
    }
}
