@page "/admin/products/edit/{id:long}"
@page "/admin/products/create"
@inherits OwningComponentBase<IStoreRepository>

@inject IWebHostEnvironment Env
@inject NavigationManager NavManager

<style>
    div.validation-message {
        color: rgb(220, 53, 69);
        font-weight: 500
    }

    .thumbnail {
        height: 100px;
        margin-right: 10px;
        object-fit: cover;
        border: 1px solid #ccc;
    }
</style>

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Product</h3>

<EditForm Model="Product" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator />

    @if (Product.ProductID != 0)
    {
        <div class="form-group">
            <label>ID</label>
            <input class="form-control" disabled value="@Product.ProductID" />
        </div>
    }

    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => Product.Name)" />
        <InputText class="form-control" @bind-Value="Product.Name" />
    </div>

    <div class="form-group">
        <label>Description</label>
        <ValidationMessage For="@(() => Product.Description)" />
        <InputText class="form-control" @bind-Value="Product.Description" />
    </div>

    <div class="form-group">
        <label>Category</label>
        <ValidationMessage For="@(() => Product.CategoryId)" />
        <InputSelect class="form-control" @bind-Value="Product.CategoryId">
            <option value="">-- Select Category --</option>
            @foreach (var cat in Categories)
            {
                <option value="@cat.CategoryId">@cat.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Price</label>
        <ValidationMessage For="@(() => Product.Price)" />
        <InputNumber class="form-control" @bind-Value="Product.Price" />
    </div>

    <!-- Ảnh chính -->
    <div class="form-group mt-3">
        <label>Main Image</label><br />
        @if (!string.IsNullOrEmpty(Product.Image))
        {
            <div class="mb-2">
                <img src="@($"/images/{Product.Image}")" alt="Main Image" style="max-height: 150px; border: 1px solid #ccc;" />
            </div>
        }
        <InputFile OnChange="OnMainImageChange" />
    </div>

    <!-- Ảnh phụ -->
    @if (Product.ProductID != 0)
    {
        <div class="form-group mt-3">
            <label>Additional Images</label>
            <InputFile OnChange="OnAdditionalImagesSelected" multiple />
        </div>

        @if (ProductImages?.Count > 0)
        {
            <div class="d-flex flex-wrap mt-2">
                @foreach (var img in ProductImages)
                {
                    <div class="position-relative me-2 mb-2">
                        <img src="@($"/images/{img.ImageUrl}")" class="thumbnail" />
                        <button type="button" class="btn-close position-absolute top-0 end-0"
                                @onclick="@(() => RemoveImage(img.ImageId))"
                                title="Xóa ảnh phụ">
                        </button>
                    </div>
                }
            </div>
        }
    }

    <div class="mt-3">
        <button type="submit" class="btn btn-@ThemeColor">Save</button>
        <NavLink class="btn btn-secondary ms-2" href="/admin/products">Cancel</NavLink>
    </div>
</EditForm>

@code {
    public IStoreRepository Repository => Service;

    [Parameter]
    public long Id { get; set; } = 0;

    public Product Product { get; set; } = new Product();
    public List<Category> Categories { get; set; } = new();
    public List<ProductImage> ProductImages { get; set; } = new();

    protected override void OnParametersSet()
    {
        Categories = Repository.Categories.ToList();

        if (Id != 0)
        {
            Product = Repository.Products.FirstOrDefault(p => p.ProductID == Id) ?? new Product();
            ProductImages = Repository.ProductImages
                .Where(i => i.ProductID == Product.ProductID)
                .ToList();
        }
    }

    private async Task OnMainImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadPath = Path.Combine(Env.WebRootPath, "images");
            if (!Directory.Exists(uploadPath))
                Directory.CreateDirectory(uploadPath);

            // Xoá ảnh cũ nếu có
            if (!string.IsNullOrEmpty(Product.Image))
            {
                var oldPath = Path.Combine(uploadPath, Product.Image);
                if (System.IO.File.Exists(oldPath))
                    System.IO.File.Delete(oldPath);
            }

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var filePath = Path.Combine(uploadPath, fileName);

            using var stream = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            Product.Image = fileName;
        }
    }

    private async Task OnAdditionalImagesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var uploadPath = Path.Combine(Env.WebRootPath, "images");
            if (!Directory.Exists(uploadPath))
                Directory.CreateDirectory(uploadPath);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var filePath = Path.Combine(uploadPath, fileName);

            using var stream = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            var image = new ProductImage
            {
                ProductID = (long)Product.ProductID,
                ImageUrl = fileName
            };

            Repository.AddProductImage(image);
            ProductImages.Add(image);
        }
    }

    public void SaveProduct()
    {
        if (Id == 0)
        {
            Repository.CreateProduct(Product);
        }
        else
        {
            Repository.SaveProduct(Product);
        }

        NavManager.NavigateTo("/admin/products");
    }

    public void RemoveImage(int imageId)
    {
        var image = ProductImages.FirstOrDefault(i => i.ImageId == imageId);
        if (image != null)
        {
            var filePath = Path.Combine(Env.WebRootPath, "images", image.ImageUrl);
            if (System.IO.File.Exists(filePath))
                System.IO.File.Delete(filePath);

            Repository.DeleteProductImage(imageId);
            ProductImages.Remove(image);
        }
    }

    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string TitleText => Id == 0 ? "Create" : "Edit";
}
